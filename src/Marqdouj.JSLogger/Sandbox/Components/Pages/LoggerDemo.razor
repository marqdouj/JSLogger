@page "/logger-demo"
@rendermode InteractiveServer
@* 
For the purpose of this demo, both type of loggers are configured. 
normally you would only configure one type of logger service (see Program.cs). 
*@
@inject IJSLogger<LoggerDemo> JSLogger
@inject IJSLoggerService<LoggerDemo> JSLoggerS

<FluentStack Orientation="Orientation.Vertical">
    <FluentCard>
        <FluentLabel>Using JSLogger (IJSObjectReference)</FluentLabel>

        <FluentToolbar>
            <FluentButton @onclick="(() => TestLogger())">Test All</FluentButton>
            <FluentSpacer />
            <FluentButton @onclick="(() => TestRaw())">Test Raw</FluentButton>
            <FluentSpacer />
            <FluentButton @onclick="(() => TestLogger(LogLevel.Trace))">Trace</FluentButton>
            <FluentButton @onclick="(() => TestLogger(LogLevel.Debug))">Debug</FluentButton>
            <FluentButton @onclick="(() => TestLogger(LogLevel.Information))">Information</FluentButton>
            <FluentButton @onclick="(() => TestLogger(LogLevel.Warning))">Warning</FluentButton>
            <FluentButton @onclick="(() => TestLogger(LogLevel.Error))">Error</FluentButton>
            <FluentButton @onclick="(() => TestLogger(LogLevel.Critical))">Critical</FluentButton>
        </FluentToolbar>
    </FluentCard>

    <FluentCard>
        <FluentLabel>Using JSLoggerService (IJSRuntime)</FluentLabel>
        <FluentToolbar>
            <FluentButton @onclick="(() => TestLogger(true))">Test All</FluentButton>
            <FluentSpacer />
            <FluentButton @onclick="(() => TestRaw(true))">Test Raw</FluentButton>
            <FluentSpacer />
            <FluentButton @onclick="(() => TestLogger(LogLevel.Trace, true))">Trace</FluentButton>
            <FluentButton @onclick="(() => TestLogger(LogLevel.Debug, true))">Debug</FluentButton>
            <FluentButton @onclick="(() => TestLogger(LogLevel.Information, true))">Information</FluentButton>
            <FluentButton @onclick="(() => TestLogger(LogLevel.Warning, true))">Warning</FluentButton>
            <FluentButton @onclick="(() => TestLogger(LogLevel.Error, true))">Error</FluentButton>
            <FluentButton @onclick="(() => TestLogger(LogLevel.Critical, true))">Critical</FluentButton>
        </FluentToolbar>
    </FluentCard>
</FluentStack>

@code {
    protected override void OnInitialized()
    {
        JSLogger.Config.SetLevel(LogLevel.Trace, LogLevel.Critical);
        JSLoggerS.Config.SetLevel(LogLevel.Trace, LogLevel.Critical);
    }

    private async Task TestRaw(bool useService = false)
    {
        if (useService)
        {
            await JSLogger.LogRaw("Test 'Raw' from Service", "color: orange; font-size: 20px;");
        }
        else
        {
            await JSLoggerS.LogRaw("Test 'Raw' from Global Script", "color: orange; font-size: 20px;");
        }
    }

    private async Task TestLogger(bool useService = false)
    {
        if (useService)
        {
            await JSLogger.LogRaw("Test 'Raw' from Service", "color: orange; font-size: 20px;");
            await JSLogger.Test("Test All from Service");
        }
        else
        {
            await JSLoggerS.LogRaw("Test 'Raw' from Global Script", "color: orange; font-size: 20px;");
            await JSLoggerS.Test("Test All from Global Script");
        }
    }

    private async Task TestLogger(LogLevel level, bool useService = false)
    {
        IJSLogger logger = useService ? JSLogger : JSLoggerS!;
        var eventName = useService ? "Logger Module" : "Logger Script";

        switch (level)
        {
            case LogLevel.Trace:
                await logger.LogTrace("Trace message from logger demo page.", eventName);
                break;
            case LogLevel.Debug:
                await logger.LogDebug("Debug message from logger demo page.", eventName);
                break;
            case LogLevel.Information:
                await logger.LogInformation("Information message from logger demo page.", eventName);
                break;
            case LogLevel.Warning:
                await logger.LogWarning("Warning message from logger demo page.", eventName);
                break;
            case LogLevel.Error:
                await logger.LogError("Error message from logger demo page.", eventName);
                try
                {
                    throw new Exception("try/catch Exception from logger demo page.");
                }
                catch (Exception ex)
                {
                    await logger.LogError(ex, eventName);
                }

                break;
            case LogLevel.Critical:
                await logger.LogCritical("Critical message from logger demo page.", eventName);
                break;
            default:
                break;
        }
    }
}
